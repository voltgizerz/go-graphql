package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/go-graphql/internal/app/auth"
	"github.com/go-graphql/internal/app/graph/generated"
	"github.com/go-graphql/internal/app/models"
	"github.com/go-graphql/pkg/logger"
	"github.com/sirupsen/logrus"
	"github.com/vektah/gqlparser/gqlerror"
)

// CreatePokemon is the resolver for the createPokemon field.
func (r *mutationResolver) CreatePokemon(ctx context.Context, input models.CreatePokemonInput) (*models.CreatePokemonPayload, error) {
	user, err := auth.ForContext(ctx)
	if err != nil {
		logger.Log.WithFields(logrus.Fields{
			"error": err.Error(),
		}).Error("User Authorization")
		return nil, gqlerror.Errorf(err.Error())
	}

	logger.Log.WithFields(logrus.Fields{
		"user_id":  user.UserID,
		"is_admin": user.IsAdmin,
	}).Info("CreatePokemon mutationResolver")

	pokemon, err := r.Resolver.PokemonService.Create(ctx, input)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return &models.CreatePokemonPayload{
		Success: true,
		Pokemon: pokemon,
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
