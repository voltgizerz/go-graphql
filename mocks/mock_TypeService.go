// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/type.service.go

// Package mock_service is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-graphql/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTypeServiceInterface is a mock of TypeServiceInterface interface.
type MockTypeServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTypeServiceInterfaceMockRecorder
}

// MockTypeServiceInterfaceMockRecorder is the mock recorder for MockTypeServiceInterface.
type MockTypeServiceInterfaceMockRecorder struct {
	mock *MockTypeServiceInterface
}

// NewMockTypeServiceInterface creates a new mock instance.
func NewMockTypeServiceInterface(ctrl *gomock.Controller) *MockTypeServiceInterface {
	mock := &MockTypeServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTypeServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeServiceInterface) EXPECT() *MockTypeServiceInterfaceMockRecorder {
	return m.recorder
}

// FetchAll mocks base method.
func (m *MockTypeServiceInterface) FetchAll(ctx context.Context, pokemonID int) ([]*models.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx, pokemonID)
	ret0, _ := ret[0].([]*models.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockTypeServiceInterfaceMockRecorder) FetchAll(ctx, pokemonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockTypeServiceInterface)(nil).FetchAll), ctx, pokemonID)
}

// FetchOne mocks base method.
func (m *MockTypeServiceInterface) FetchOne(ctx context.Context, typeID int) ([]*models.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOne", ctx, typeID)
	ret0, _ := ret[0].([]*models.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOne indicates an expected call of FetchOne.
func (mr *MockTypeServiceInterfaceMockRecorder) FetchOne(ctx, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOne", reflect.TypeOf((*MockTypeServiceInterface)(nil).FetchOne), ctx, typeID)
}
