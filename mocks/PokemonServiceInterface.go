// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/go-graphql/models"

// PokemonServiceInterface is an autogenerated mock type for the PokemonServiceInterface type
type PokemonServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *PokemonServiceInterface) Create(ctx context.Context, input models.CreatePokemonInput) (*models.Pokemon, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.Pokemon
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePokemonInput) *models.Pokemon); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePokemonInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PokemonServiceInterface) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx, limit, offset
func (_m *PokemonServiceInterface) FetchAll(ctx context.Context, limit int, offset int) ([]*models.Pokemon, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*models.Pokemon
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Pokemon); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOne provides a mock function with given fields: ctx, id
func (_m *PokemonServiceInterface) FetchOne(ctx context.Context, id int) (*models.Pokemon, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Pokemon
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Pokemon); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
