// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/go-graphql/models"

// PokemonServiceInterface is an autogenerated mock type for the PokemonServiceInterface type
type PokemonServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *PokemonServiceInterface) Create(input models.CreatePokemonInput) (*models.Pokemon, error) {
	ret := _m.Called(input)

	var r0 *models.Pokemon
	if rf, ok := ret.Get(0).(func(models.CreatePokemonInput) *models.Pokemon); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.CreatePokemonInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PokemonServiceInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: limit, offset
func (_m *PokemonServiceInterface) FetchAll(limit int, offset int) ([]*models.Pokemon, error) {
	ret := _m.Called(limit, offset)

	var r0 []*models.Pokemon
	if rf, ok := ret.Get(0).(func(int, int) []*models.Pokemon); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOne provides a mock function with given fields: id
func (_m *PokemonServiceInterface) FetchOne(id int) (*models.Pokemon, error) {
	ret := _m.Called(id)

	var r0 *models.Pokemon
	if rf, ok := ret.Get(0).(func(int) *models.Pokemon); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
