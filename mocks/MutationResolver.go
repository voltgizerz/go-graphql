// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import models "github.com/go-graphql/models"

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// CreatePokemon provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreatePokemon(ctx context.Context, input models.CreatePokemonInput) (*models.CreatePokemonPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.CreatePokemonPayload
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePokemonInput) *models.CreatePokemonPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreatePokemonPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePokemonInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePokemon provides a mock function with given fields: ctx, input
func (_m *MutationResolver) DeletePokemon(ctx context.Context, input models.DeletePokemonInput) (*models.DeletePokemonPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.DeletePokemonPayload
	if rf, ok := ret.Get(0).(func(context.Context, models.DeletePokemonInput) *models.DeletePokemonPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeletePokemonPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.DeletePokemonInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePokemon provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdatePokemon(ctx context.Context, input models.UpdatePokemonInput) (*models.UpdatePokemonPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.UpdatePokemonPayload
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdatePokemonInput) *models.UpdatePokemonPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UpdatePokemonPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.UpdatePokemonInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
