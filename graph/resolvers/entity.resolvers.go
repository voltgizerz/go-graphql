package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"strconv"

	"github.com/go-graphql/graph/generated"
	"github.com/go-graphql/models"
	"github.com/vektah/gqlparser/gqlerror"
)

// FindPokemonByID is the resolver for the findPokemonByID field.
func (r *entityResolver) FindPokemonByID(ctx context.Context, id string) (*models.Pokemon, error) {
	// user, err := auth.ForContext(ctx)
	// if err != nil {
	// 	logger.Log.WithFields(logrus.Fields{
	// 		"error": err.Error(),
	// 	}).Error("User Authorization")
	// 	return nil, gqlerror.Errorf(err.Error())
	// }

	// logger.Log.WithFields(logrus.Fields{
	// 	"user_id":  user.UserID,
	// 	"is_admin": user.IsAdmin,
	// }).Info("entityResolver FindPokemonByID")

	pokemonID, err := strconv.Atoi(id)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	res, err := r.Resolver.PokemonService.FetchOne(ctx, pokemonID)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return res, nil
}

// Entity returns generated.EntityResolver implementation.
func (r *Resolver) Entity() generated.EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
